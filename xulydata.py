# -*- coding: utf-8 -*-
"""xulydata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_8bT4uneuONX3gbxC9bt5mBJoC9dG40K

##Đừng bấm chạy code hết 1 lần (chạy từng ô)
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("sttaseen/wlasl2000-resized")
print("Path to dataset files:", path)

import os

video_files = []
for root, dirs, files in os.walk(path):
    for file in files:
        if file == "WLASL_v0.3.json":
            json_path = os.path.join(root, file)
        if file.lower().endswith(('.mp4', '.avi', '.mov')):
            video_files.append(os.path.join(root, file))

print(f"Tìm được {len(video_files)} video đầu tiên:")

import glob
video_files = glob.glob(os.path.join(path, '**/*.mp4'), recursive=True)
print("Danh sách video tìm thấy:")
for v in video_files:
    print(v)

!pip install mediapipe

import cv2
import numpy as np
import mediapipe as mp
import pandas as pd
import matplotlib.pyplot as plt

# Setup Mediapipe: Lấy pose của cơ thể
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=False, min_detection_confidence=0.5, min_tracking_confidence=0.5)

mp_drawing = mp.solutions.drawing_utils

# Hàm trích xuất keypoints từ video
def extract_pose_keypoints(video_path):
    cap = cv2.VideoCapture(video_path)

    keypoints_list = []

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Chuyển đổi màu sắc từ BGR sang RGB
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Xử lý pose qua Mediapipe
        result = pose.process(rgb_frame)
        if result.pose_landmarks:
            # Trích xuất tọa độ từ các landmark
            keypoints = []
            for landmark in result.pose_landmarks.landmark:
                keypoints.append([landmark.x, landmark.y, landmark.z])

            keypoints_list.append(keypoints)

    cap.release()

    keypoints_array = np.array(keypoints_list)
    return keypoints_array

# Trích xuất từ 1 video
# video_path = "videos/05739.mp4"  # Ví dụ
# label = video_metadata[video_path]
# pose_keypoints = extract_pose_keypoints(video_path, label)

for filename in os.listdir(path):
    if filename.endswith(".mp4"):
        video_path = os.path.join(path, filename)

        # Trích xuất keypoints từ video
        keypoints = extract_pose_keypoints(video_path)

        # if keypoints is not None:  # Check if keypoints are valid
        #     print(f"Số lượng frames: {keypoints.shape[0]}, Số landmark mỗi frame: {keypoints.shape[1]} (tọa độ 3D)")
        # else:
        #     print(f"Video {video_path}: Không có dữ liệu keypoints hợp lệ.")

"""###**Lưu ý**: Nếu muốn lưu keypoint vô csv thì hãy dùng

### Code dưới đây là trích xuất label cho mỗi video tương ứng
"""

import json

# Đọc file JSON
with open(json_path, "r") as f:
    wlasl_data = json.load(f)

print(f"Số lượng từ: {len(wlasl_data)}")

# Map video -> label từ JSON
video_labels = {}  # Dictionary lưu video ID và nhãn
for entry in wlasl_data:
    gloss = entry["gloss"]
    for instance in entry["instances"]:
        video_id = instance["video_id"]
        video_labels[video_id] = gloss

print("Danh sách nhãn gắn với video:")
print(video_labels)

final_data = {}  # Dictionary lưu {video_path: label}

for video_path in video_files:
    filename = os.path.basename(video_path)
    video_id, _ = os.path.splitext(filename)

    label = video_labels.get(video_id, "unknown")
    final_data[video_path] = label

print("Kết quả gắn nhãn:")
print(final_data)

# tổng hợp lại thành một dict {'label1':instances,}

from collections import defaultdict

label_to_instances = defaultdict(list)

for entry in wlasl_data:
    label = entry["gloss"]
    label_to_instances[label].extend(entry["instances"])
for label, instances in list(label_to_instances.items())[:3]:
    print(f"{label}: {len(instances)} video(s)")
    print(f"{label}: {instances}")

labels = list(label_to_instances.keys())
instance_counts = [len(instances) for instances in label_to_instances.values()]

df = pd.DataFrame({
    'gloss': labels,
    'video_count': instance_counts
})

# Xem trước dữ liệu
print(df.head())

df.sort_values('video_count', ascending=False).plot(kind='bar', x='gloss', y='video_count', figsize=(20, 6))
plt.title('Số lượng video cho từng gloss')
plt.xlabel('Gloss')
plt.ylabel('Số lượng video')
plt.xticks(rotation=90)
plt.show()

df['video_count'].hist(bins=50, figsize=(12, 6))
plt.title('Phân phối số lượng video giữa các gloss')
plt.xlabel('Số lượng video của 1 từ')
plt.ylabel('Tần suất')
plt.show()

df.boxplot(column='video_count', figsize=(12, 6))
plt.title('Phân bố số lượng video giữa các gloss')
plt.xlabel('Gloss')
plt.ylabel('Số lượng video')
plt.show()

df.sort_values('video_count', ascending=False).plot(kind='bar', x='gloss', y='video_count', figsize=(12, 6), logy=True)
plt.title('Top 50 gloss có số lượng video lớn nhất (Log Scale)')
plt.xlabel('Gloss')
plt.ylabel('Số lượng video (Log Scale)')
plt.xticks(rotation=90)
plt.show()